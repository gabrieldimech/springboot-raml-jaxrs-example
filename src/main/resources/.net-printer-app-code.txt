using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Net.Http;
//using System.Web.Script.Serialization.JavaScriptSerializer;
using System.Web.Script.Serialization;
using System.IO;
using System.Diagnostics;
using System.Net;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Microsoft.WindowsAzure.Storage;
using Microsoft.WindowsAzure.Storage.Auth;
using Microsoft.WindowsAzure.Storage.Blob;
using System.Configuration;
using System.Drawing.Imaging;

namespace PrinterApplication
{
    public partial class Form1 : Form
    {

        //string webServiceUrl = @"http://localhost:49173/FylmService.aspx?";
        string webServiceUrl = @"http://fylmservice.azurewebsites.net/FylmService.aspx?";
        static string mainFylmDownloadPath = @"c:\\test\\";

        //files and folder paths to persist last roll id which was downloaded in the system (this allows us to get only pending rolls which have not already been downloaded)
        string fourByFourCsv = mainFylmDownloadPath + "4x4\\4x4.csv";
        string sixByFourCsv = mainFylmDownloadPath + "6x4\\6x4.csv";
         string fourByFourFolder = mainFylmDownloadPath + "4x4\\";
        string sixByFourFolder = mainFylmDownloadPath + "6x4\\";

        int fourByFour = 1;
        int sixByFour = 2;
        int pending_status_id = 0;
        string last_modified = "1970-05-23 18:17:43.690";
        private int lastRollPurchaseId = 0;
        List<RollAndRollPurchaseJoin> rollsAndPurchases = new List<RollAndRollPurchaseJoin>();
        private DataView dvMainSource = null;

        public Form1()
        {
            InitializeComponent();
            getLastRollPurchaseId();
            organizeGrid();
        }

        //set the last downloaded roll purchase id
        public void getLastRollPurchaseId()
        {
            //a csv file will be used to persist the downloaded fylm purchase ids.
            //This is useful for retrieveing the last fylm purchase id for the next download poll
            try
            {
                int largest6x4 = 0;
                using (TextReader reader = File.OpenText(sixByFourCsv))
                {
                    string line = reader.ReadLine();
                    string[] rolls6x4 = line.Split(',');
                    largest6x4 = getLargestId(rolls6x4);
                }
                lastRollPurchaseId = largest6x4;
                Console.WriteLine("last roll purchase id is : " + lastRollPurchaseId);
            }
            catch (Exception ex)
            {
                System.Console.WriteLine("Exception when parsing last roll processed: " + ex);
            }
        }

        public int getLargestId(string[] ids)
        {
            int tempLargest = Int32.Parse(ids[0]);
            for (int i = 0; i < ids.Length - 1; i++)
            {
                if (tempLargest < Int32.Parse(ids[i]) && ids[i].Length > 0 && ids[i] != "")
                {
                    tempLargest = Int32.Parse(ids[i]);
                }
            }
            return tempLargest;
        }

        private void organizeGrid()
        {

            /*if (dvMainSource == null)
                -1;
            else
                dvMainSource.Table.Rows.Count;
            */
            dataGridView1.Columns["Open"].DisplayIndex = (dvMainSource == null ? 0 : dvMainSource.Table.Columns.Count) + 2;
            dataGridView1.Columns["Download"].DisplayIndex = (dvMainSource == null ? 0 : dvMainSource.Table.Columns.Count) + 2;
            dataGridView1.Columns["Close"].DisplayIndex = (dvMainSource == null ? 0 : dvMainSource.Table.Columns.Count) + 2;
        }
        //this method simulates the response from the server to give back the pending print jobs
        private async void getRolls(object sender, EventArgs e)
        {
            getPendingRollsAndImages(pending_status_id, last_modified);
        }

        //method to get all rolls form server pending printing
        public async void getPendingRollsAndImages(int pending_status_id, string last_modified)
        {
            string str = "method=get_pending_rolls&status_id=" + pending_status_id + "&last_modified=" + last_modified + "&last_roll_purchase_id=" + lastRollPurchaseId;

            byte[] bytes = Encoding.Default.GetBytes(str);
            str = Encoding.UTF8.GetString(bytes);
            string page = webServiceUrl + str;

            using (HttpClient client = new HttpClient())
            using (HttpResponseMessage response = await client.GetAsync(page))
            using (HttpContent content = response.Content)
            {
                string httpresult = await content.ReadAsStringAsync();
                Console.WriteLine(httpresult);
                List<RollAndRollPurchaseJoin> tempRollsAndPurchases = parseRollAndRollPurchaseJoin(httpresult);

                //download all images and create folders for each roll purchase
                for (int i = 0; i < tempRollsAndPurchases.Count(); i++)
                {
                    getRollImages(tempRollsAndPurchases[i]);
                }
                //set the last id retrieved
                if (tempRollsAndPurchases.Count() > 0)
                {
                    lastRollPurchaseId = tempRollsAndPurchases[tempRollsAndPurchases.Count() - 1].RollPurchaseId;
                }
                //combine existing list with latest updates
                rollsAndPurchases.AddRange(tempRollsAndPurchases);
                DataTable dtValue = ListToDataTable(rollsAndPurchases);
                dvMainSource = new DataView(dtValue);
                dataGridView1.DataSource = dvMainSource;
                organizeGrid();
                //grey out the closed orders
                for (int i = 0; i < dataGridView1.RowCount - 1; i++)
                {
                    if (dataGridView1.Rows[i].Cells[7].Value.ToString() == "1")
                        dataGridView1.Rows[i].DefaultCellStyle.ForeColor = Color.Gray;

                }
            }
        }

        private async void getRollImages(RollAndRollPurchaseJoin roll)
        {
            //string str = "method=get_roll_images&roll_ids=" + roll.RollId + "&last_modified=" + roll.LastModified;
            string str = "method=get_roll_images_without_deleted&roll_ids=" + roll.RollId + "&last_modified=" + roll.LastModified;

            byte[] bytes = Encoding.Default.GetBytes(str);
            str = Encoding.UTF8.GetString(bytes);
            string page = webServiceUrl + str;

            using (HttpClient client = new HttpClient())
            using (HttpResponseMessage response = await client.GetAsync(page))
            using (HttpContent content = response.Content)
            {
                string result = await content.ReadAsStringAsync();
                if (result != null)
                {
                    Console.WriteLine(result);
                }

                List<RollImage> rollimages = jsonToRollImages(result);
                GetImagesAndCreateFolders(rollimages, roll.ProductId, roll.RollPurchaseId, roll.UserId);
            }
        }

        public static DataTable ListToDataTable<T>(IList<T> lst)
        {
            DataTable currentDT = CreateTable<T>();
            Type entType = typeof(T);
            PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(entType);
            foreach (T item in lst)
            {
                DataRow row = currentDT.NewRow();
                foreach (PropertyDescriptor prop in properties)
                {
                    if (prop.PropertyType == typeof(Nullable<decimal>) || prop.PropertyType == typeof(Nullable<int>) || prop.PropertyType == typeof(Nullable<Int64>))
                    {
                        if (prop.GetValue(item) == null)
                            row[prop.Name] = 0;
                        else
                            row[prop.Name] = prop.GetValue(item);
                    }
                    else
                        row[prop.Name] = prop.GetValue(item);
                }
                currentDT.Rows.Add(row);
            }
            return currentDT;
        }

        public static DataTable CreateTable<T>()
        {
            Type entType = typeof(T);
            DataTable tbl = new DataTable("data");
            PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(entType);
            foreach (PropertyDescriptor prop in properties)
            {
                if (prop.PropertyType == typeof(Nullable<decimal>))
                    tbl.Columns.Add(prop.Name, typeof(decimal));
                else if (prop.PropertyType == typeof(Nullable<int>))
                    tbl.Columns.Add(prop.Name, typeof(int));
                else if (prop.PropertyType == typeof(Nullable<Int64>))
                    tbl.Columns.Add(prop.Name, typeof(Int64));
                else
                    tbl.Columns.Add(prop.Name, prop.PropertyType);
            }
            return tbl;
        }

        private void openFolderForSelectedRoll(object sender, EventArgs e)
        {
            string value = dataGridView1.SelectedRows[0].Cells[0].Value.ToString();
            string productId = dataGridView1.SelectedRows[0].Cells[6].Value.ToString();
            string productFolderName = "";
            if (productId == "1")
            {
                productFolderName = "4x4";
            }
            else
            {
                productFolderName = "6x4";
            }
            Process.Start(mainFylmDownloadPath + productFolderName + "\\" + value);
        }

    /*    private Bitmap cropAndSave(Bitmap image, int BoundsBottom, int BoundsTop, int BoundsLeft, int BoundsRight, int orientation)
        {
            // Clone a portion of the Bitmap object.
            //Rectangle cloneRect = new Rectangle(0, 0, 100, 100);
            //left, top, right - left, bottom - top
            switch (orientation)
            {
                case 90:
                    image.RotateFlip(RotateFlipType.Rotate90FlipNone);
                    break;
                case -90:
                    image.RotateFlip(RotateFlipType.Rotate270FlipNone);
                    break;
                case 180:
                    image.RotateFlip(RotateFlipType.Rotate180FlipNone);
                    break;
                case 270:
                    image.RotateFlip(RotateFlipType.Rotate270FlipNone);
                    break;
                default:
                    break;
            }

            Rectangle cloneRect = new Rectangle(BoundsLeft, BoundsTop, BoundsRight - BoundsLeft, BoundsBottom - BoundsTop);
            System.Drawing.Imaging.PixelFormat format =
                    image.PixelFormat;

            //if (!(BoundsLeft == 0 && BoundsTop == 0 && BoundsRight == 0 && BoundsLeft == 0)
              //  && (image.Width > (BoundsRight - BoundsLeft))
              //  && (image.Height > (BoundsBottom - BoundsTop)))
                image = image.Clone(cloneRect, format);
            return image;
        } */

        private Bitmap cropAndSave(Bitmap image, int BoundsBottom, int BoundsTop, int BoundsLeft, int BoundsRight, int orientation)
        {


                Rectangle cloneRect = new Rectangle(BoundsLeft, BoundsTop, BoundsRight - BoundsLeft, BoundsBottom - BoundsTop);
                System.Drawing.Imaging.PixelFormat format =
                        image.PixelFormat;



                image = image.Clone(cloneRect, format);

                switch (orientation)
                {
                    case 90:
                        image.RotateFlip(RotateFlipType.Rotate90FlipNone);
                        break;
                    case -90:
                        image.RotateFlip(RotateFlipType.Rotate270FlipNone);
                        break;
                    case 180:
                        image.RotateFlip(RotateFlipType.Rotate180FlipNone);
                        break;
                    case 270:
                        image.RotateFlip(RotateFlipType.Rotate270FlipNone);
                        break;
                    default:
                        break;
                }

                return image;

            }

     /*   private Bitmap cropAndSave(Bitmap image, int BoundsBottom, int BoundsTop, int BoundsLeft, int BoundsRight, int orientation)
        {


            Rectangle cloneRect = new Rectangle(BoundsLeft, BoundsTop, BoundsRight - BoundsLeft, BoundsBottom - BoundsTop);
            System.Drawing.Imaging.PixelFormat format =
                    image.PixelFormat;

            //if (!(BoundsLeft == 0 && BoundsTop == 0 && BoundsRight == 0 && BoundsLeft == 0)
            //  && (image.Width > (BoundsRight - BoundsLeft))
            //  && (image.Height > (BoundsBottom - BoundsTop)))
            image = image.Clone(cloneRect, format);

            switch (orientation)
            {
                case 90:
                    image.RotateFlip(RotateFlipType.Rotate90FlipNone);
                    break;
                case -90:
                    image.RotateFlip(RotateFlipType.Rotate270FlipNone);
                    break;
                case 180:
                    image.RotateFlip(RotateFlipType.Rotate180FlipNone);
                    break;
                case 270:
                    image.RotateFlip(RotateFlipType.Rotate270FlipNone);
                    break;
                default:
                    break;
            }
            return image;
        }
      * */

        private void GetImagesAndCreateFolders(List<RollImage> rollImages, int productId, int rollPurchaseId, int userId)
        {
            // Retrieve storage account from connection string.
            CloudStorageAccount storageAccount = CloudStorageAccount.Parse(
            ConfigurationManager.ConnectionStrings["StorageConnectionString"].ConnectionString);
            // Create the blob client.
            CloudBlobClient blobClient = storageAccount.CreateCloudBlobClient();
            // Retrieve reference to a previously created container.
            CloudBlobContainer container = blobClient.GetContainerReference("fylm-account-" + userId);
            // Loop over items within the container and output the length and URI.
            string[] arr = new string[1];
            arr[0] = rollPurchaseId.ToString();
            if (productId == fourByFour)
            {
                updateSavedRolls(fourByFourCsv, arr);
            }
            else
            {
                updateSavedRolls(sixByFourCsv, arr);
            }

            foreach (RollImage rollImage in rollImages)
            {
                for (int i = 0; i < rollImage.NumberOfCopies; i++)
                {
                    string tempPath = "";

                    //assuming product id 1 is 4x4
                    if (productId == fourByFour)
                    {
                        tempPath = fourByFourFolder + rollPurchaseId;
                    }
                    else
                    {
                        //or if 6x4
                        tempPath = sixByFourFolder + rollPurchaseId;
                    }

                    // Save blob contents to a file.
                    var blob = container.GetBlobReferenceFromServer(rollImage.ImageUploadPath);
                    Console.WriteLine("PICTURES SIZE IS: " + blob.Properties.Length);
                    System.IO.Stream stream = new MemoryStream();
                    blob.DownloadToStream(stream);
                    stream.Position = 0;

                    Bitmap image = new Bitmap(stream);

                  //  if (rollImage.Orientation != -90)
                  //  {

                        try
                        {
                            Bitmap croppedImage = cropAndSave(image, rollImage.BoundsBottom, rollImage.BoundsTop, rollImage.BoundsLeft, rollImage.BoundsRight, rollImage.Orientation);

                            if (Directory.Exists(tempPath))
                            {
                                string tempid = i.ToString("00");
                                tempPath = tempPath + "\\" + rollImage.id + tempid + ".jpg";

                                croppedImage.Save(tempPath, System.Drawing.Imaging.ImageFormat.Jpeg);
                            }
                            else
                            {
                                ImageCodecInfo jgpEncoder = GetEncoder(ImageFormat.Jpeg);

                                // Create an Encoder object based on the GUID
                                // for the Quality parameter category.
                                System.Drawing.Imaging.Encoder myEncoder =
                                    System.Drawing.Imaging.Encoder.Quality;

                                // Create an EncoderParameters object.
                                // An EncoderParameters object has an array of EncoderParameter
                                // objects. In this case, there is only one
                                // EncoderParameter object in the array.
                                EncoderParameters myEncoderParameters = new EncoderParameters(1);

                                EncoderParameter myEncoderParameter = new EncoderParameter(myEncoder,
                                    100L);

                                myEncoderParameter = new EncoderParameter(myEncoder, 100L);
                                myEncoderParameters.Param[0] = myEncoderParameter;



                                DirectoryInfo di = Directory.CreateDirectory(tempPath);
                                string tempid = i.ToString("00");
                                tempPath = tempPath + "\\" + rollImage.id + tempid + ".jpg";
                                //     croppedImage.Save(tempPath, System.Drawing.Imaging.ImageFormat.Jpeg);
                                croppedImage.Save(tempPath, jgpEncoder,
                                    myEncoderParameters);
                            }
                        }


                        catch (Exception e)
                        {
                            Console.WriteLine("The process failed: {0}", e.ToString());
                        }
                  //  }
                }
            }
        }

        private ImageCodecInfo GetEncoder(ImageFormat format)
        {
            ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders();
            foreach (ImageCodecInfo codec in codecs)
            {
                if (codec.FormatID == format.Guid)
                {
                    return codec;
                }
            }
            return null;
        }



        public List<Roll> jsonToRolls(string jsonRolls)
        {
            List<Roll> rolls = new List<Roll>();
            JToken outer = JToken.Parse(jsonRolls);
            JObject result = outer["result"].Value<JObject>();
            JToken messageDescription = result.GetValue("messageDescription");
            JToken[] jtokenrolls = messageDescription.ToArray();

            Type type = typeof(Roll);
            foreach (JToken k in jtokenrolls)
            {
                Roll roll = (Roll)JsonConvert.DeserializeObject(k.ToString(), type);
                rolls.Add(roll);
                Console.WriteLine(roll.id);
            }

            return rolls;
        }

        public List<RollImage> jsonToRollImages(string jsonRollImages)
        {
            List<RollImage> rollImages = new List<RollImage>();
            JToken outer = JToken.Parse(jsonRollImages);
            JObject result = outer["result"].Value<JObject>();
            JToken messageDescription = result.GetValue("messageDescription");
            JToken[] jtokenrolls = messageDescription.ToArray();

            Type type = typeof(RollImage);
            foreach (JToken k in jtokenrolls)
            {
                RollImage rollImage = (RollImage)JsonConvert.DeserializeObject(k.ToString(), type);
                rollImages.Add(rollImage);
            }
            return rollImages;
        }

        public List<RollAndRollPurchaseJoin> parseRollAndRollPurchaseJoin(string jsonJoin)
        {
            List<RollAndRollPurchaseJoin> rollImages = new List<RollAndRollPurchaseJoin>();
            JToken outer = JToken.Parse(jsonJoin);
            JObject result = outer["result"].Value<JObject>();
            JToken messageDescription = result.GetValue("messageDescription");
            JToken[] jtokenrolls = messageDescription.ToArray();

            Type type = typeof(RollAndRollPurchaseJoin);
            foreach (JToken k in jtokenrolls)
            {
                RollAndRollPurchaseJoin rollImage = (RollAndRollPurchaseJoin)JsonConvert.DeserializeObject(k.ToString(), type);
                rollImages.Add(rollImage);
            }
            return rollImages;
        }

        public void clearFolder(string path)
        {
            bool directoryExists = Directory.Exists(path);

            if (directoryExists)
            {
                Directory.Delete(path, true);
            }
        }

        public string[] getDownloadedRolls(string folder)
        {
            string[] Directories = Directory.GetDirectories(folder);
            return Directories;
        }

        public void updateSavedRolls(string fileName, string[] arr)
        {
            SaveArrayAsCSV(arr, fileName);
        }

        public static void SaveArrayAsCSV(Array arrayToSave, string fileName)
        {
            // using (StreamWriter file = new StreamWriter(fileName))
            //{
            //    WriteItemsToFile(arrayToSave, file);
            // }
            using (StreamWriter sw = File.AppendText(fileName))
            {
                WriteItemsToFile(arrayToSave, sw);
            }
        }

        private static void WriteItemsToFile(Array items, TextWriter file)
        {
            foreach (object item in items)
            {
                if (item is Array)
                {
                    WriteItemsToFile(item as Array, file);
                    file.Write(Environment.NewLine);
                }
                else file.Write(item + ",");
            }
        }



        #region DataGridView Events

        private void dataGridView1_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            Console.WriteLine(dataGridView1.Columns[e.ColumnIndex].Name);
            if (dvMainSource != null && dvMainSource.Table.Rows.Count > e.RowIndex)
            {
                string rollPurhaseId = dataGridView1.Rows[e.RowIndex].Cells["RollPurchaseId"].Value.ToString();


                if (dataGridView1.Columns[e.ColumnIndex].Name.ToLower().Equals("open"))
                {
                    OpenFolder(rollPurhaseId);
                }
                else if (dataGridView1.Columns[e.ColumnIndex].Name.ToLower().Equals("close"))
                {
                    CloseOrder(rollPurhaseId);
                }
                else if (dataGridView1.Columns[e.ColumnIndex].Name.ToLower().Equals("download"))
                {
                    DownloadRollImages(rollPurhaseId);
                }
            }
        }

        private void dataGridView1_CellPainting(object sender, DataGridViewCellPaintingEventArgs e)
        {
            if (e.RowIndex >= 0 && e.ColumnIndex >= 0 && dvMainSource != null && dvMainSource.Table.Rows.Count > e.RowIndex)
            {
                bool shouldColour = dvMainSource.Table.Rows[e.RowIndex]["StatusId"].ToString() == "1";

                SolidBrush br = null;

                if (shouldColour)
                    br = new SolidBrush(Color.Orange);
                else
                    br = new SolidBrush(Color.Gray);

                e.Graphics.FillRectangle(br, e.CellBounds);
                e.PaintContent(e.ClipBounds);
                e.Handled = true;
            }
        }
        #endregion

        #region Roll Functions
        private async void OpenFolder(string rollPurchaseId)
        {
            var dtRow = (from table in dvMainSource.Table.AsEnumerable()
                         where table.Field<Int32>("RollPurchaseId").ToString().Equals(rollPurchaseId)
                         select table).AsEnumerable().ToList();

            if (dtRow != null && dtRow.Count > 0)
            {
                string rollId = dtRow[0]["RollId"].ToString();
                string lastModified = dtRow[0]["LastModified"].ToString();
                string productId = dtRow[0]["ProductId"].ToString();


                string productFolderName = "";
                if (productId == "1")
                {
                    productFolderName = "4x4";
                }
                else
                {
                    productFolderName = "6x4";
                }
                Process.Start(@"c:\test\" + productFolderName + "\\" + rollPurchaseId);
            }
        }

        private async void CloseOrder(string rollPurchaseId)
        {
            var dtRow = (from table in dvMainSource.Table.AsEnumerable()
                         where table.Field<Int32>("RollPurchaseId").ToString().Equals(rollPurchaseId)
                         select table).AsEnumerable().ToList();

            if (dtRow != null && dtRow.Count > 0)
            {
                string rollId = dtRow[0]["RollId"].ToString();
                string lastModified = dtRow[0]["LastModified"].ToString();
                string productId = dtRow[0]["ProductId"].ToString();

                string productName = "";

                string str = "method=update_roll_purchase&rollId=" + rollPurchaseId + "&statusId=" + 1;

                byte[] bytes = Encoding.Default.GetBytes(str);
                str = Encoding.UTF8.GetString(bytes);
               // string page = "http://localhost:49172/FylmService.aspx?" + str;

                using (HttpClient client = new HttpClient())
                using (HttpResponseMessage response = await client.GetAsync(webServiceUrl + str))
                using (HttpContent content = response.Content)
                {
                    string httpresult = await content.ReadAsStringAsync();
                    Console.WriteLine(httpresult);
                    /*List<RollAndRollPurchaseJoin> tempRollsAndPurchases = parseRollAndRollPurchaseJoin(httpresult);

                    //donload all images and create folders for each roll purchase
                    for (int i = 0; i < tempRollsAndPurchases.Count(); i++)
                    {
                        getRollImages(tempRollsAndPurchases[i]);
                    }
                    //set the last id retrieved
                    if (tempRollsAndPurchases.Count() > 0)
                    {
                        lastRollPurchaseId = tempRollsAndPurchases[tempRollsAndPurchases.Count() - 1].RollPurhaseId;
                    }
                    //combine existing list with latest updates
                    rollsAndPurchases.AddRange(tempRollsAndPurchases);

                    DataTable dtValue = ListToDataTable(rollsAndPurchases);
                    dvMainSource = new DataView(dtValue);
                    dataGridView1.DataSource = dvMainSource;
                     * */

                    //TO DO : Update Data grid view
                    var row = (from table in dvMainSource.Table.AsEnumerable()
                               where table.Field<Int32>("RollPurchaseId").ToString().Equals(rollPurchaseId)
                               select table).AsEnumerable().ToList();

                    if (row != null && row.Count > 0)
                    {
                        row[0]["StatusId"] = "1";
                    }
                }

                if (productId == "1")
                {
                    productName = "4x4";
                }
                else
                {
                    productName = "6x4";
                }
                //create folder path and delete folder
                string path = "c:\\test\\" + productName + "\\" + rollPurchaseId;
                clearFolder(path);
            }
        }

        private async void DownloadRollImages(string rollPurchaseId)
        {
            var dtRow = (from table in dvMainSource.Table.AsEnumerable()
                         where table.Field<Int32>("RollPurchaseId").ToString().Equals(rollPurchaseId)
                         select table).AsEnumerable().ToList();

            if (dtRow != null && dtRow.Count > 0)
            {
                string rollId = dtRow[0]["RollId"].ToString();
                string lastModified = dtRow[0]["LastModified"].ToString();
                string productId = dtRow[0]["ProductId"].ToString();
                string userId = dtRow[0]["UserId"].ToString();
                //string str = "method=get_roll_images&roll_ids=" + rollId + "&last_modified=" + lastModified;
                string str = "method=get_roll_images_without_deleted&roll_ids=" + rollId + "&last_modified=" + lastModified;

                byte[] bytes = Encoding.Default.GetBytes(str);
                str = Encoding.UTF8.GetString(bytes);
                //string page = "http://localhost:49172/FylmService.aspx?" + str;

                using (HttpClient client = new HttpClient())
                using (HttpResponseMessage response = await client.GetAsync(webServiceUrl + str))
                using (HttpContent content = response.Content)
                {
                    string result = await content.ReadAsStringAsync();
                    if (result != null)
                    {
                        Console.WriteLine(result);
                    }

                    List<RollImage> rollimages = jsonToRollImages(result);
                    GetImagesAndCreateFolders(rollimages, Convert.ToInt32(productId), Convert.ToInt32(rollPurchaseId), Convert.ToInt32(userId));
                }
            }
        }
        #endregion

        //test method to crop images using a 6:4 ratio - intended to crop images that are not cropped by the user (hence have default cropping dimensions)
        private void button1_Click(object sender, EventArgs e)
        {
            //path to test images folder
            string path = "C:\\test\\6x4-backup\\20\\21200.jpg";
            string pathCropped = "C:\\test\\6x4-backup\\20\\21200-6BY4.jpg";

            System.Drawing.Bitmap bm1 = new Bitmap(path);
            float imageWidth = bm1.PhysicalDimension.Width;
            float imageHeight = bm1.PhysicalDimension.Height;

            float halfWidth = imageWidth / 2;
            float halfHeight = imageHeight / 2;
            //croppedHeight is 2/3 of imageWidth
            float croppedHeight = imageWidth * 2 / 3;
            float halfCroppedHeight = croppedHeight / 2;
            float bloundsTop = halfHeight - halfCroppedHeight;
            float boundsBottom = bloundsTop + croppedHeight;

            System.Drawing.Bitmap croppedImage = cropAndSave(bm1, (int)boundsBottom, (int)bloundsTop, 0, (int)imageWidth, 0);
            croppedImage.Save(pathCropped);
        }
    }
}
